1.顶层const与底层const的 区别？
    用名词顶层const表示指针本事是一个常量，而名词底层表示指针所指向的对象是一个常量。
2.什么是常量表达式？
    常量表达式是指不会改变并且在编译过程 就能得到计算结果的表达式。新标准规定，允许将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化。
3.什么是数据抽象的封装？
    类的基本思想就是数据抽象和封装。数据抽象就是一种依赖与接口和实现分离的编程技术。类的接口包括用户所能执行的操作；类的实现包括类的数据成员、负责接口实现的函数体和定义类所需要的各种私有函数；
    封装实现了类的接口和实现的分离。封装后的类隐藏了它的实现细节。也就是说，类的用户只能实现接口而无法访问实现实体。
4.explicit关键字的作用？
    关键字explicit只能作用于只有一个实参的构造函数（需要多个实参的构造函数不能用于隐式转换，所以无需将这些构造函数指定为explicit的）。只能在类内声明构造函数时使用explicit关键字，在类外部定义时不应重复。
    当使用explicit关键字声明构造函数 时，它将只能以直接初始化的形式使用。而且，编译器将不会在自动转换过程中使用该构造函数。
5.操作符endl用于换行并刷新缓冲区的工作。IO库还有两个类似的操作符：flush和ends。flush刷新缓冲区，但不输入任何额外的字符；ends向缓冲区插入一个空字符，然后刷新缓冲区。
6.静态内存和动态内存的区别？
    静态内存编译时完成，不占用CPU资源，动态内存在执行时完成分配，分配与释放都占用CPU资源；
    静态内存在栈上分配，动态内存在堆上分配；
    静态内存按计划分配，有编译器负责，动态内存按需分配，由程序员负责；
    动态内存分配需要指针和引用，静态内存不需要。
7.智能指针有哪几种？
    shared_ptr允许多个指针指向同一个对象；unique_ptr则独占所指向的对象。标准库还定义了一个名为weak_ptr伴随类，它是一种弱引用，指向shared_ptr所管理的对象。
8.什么时候会递增递减shared_ptr的引用计数？
    对于shared_ptr：赋值，拷贝，向函数传递一个智能指针，或函数返回一个智能指针都会增加当前的智能指针的计数，向一个shared_ptr赋值一个新的变量或者一个shared_ptr被销毁时，计数器就会递减。
9.默认构造函数？
    默认构造函数就是在没有显示提供调用的构造函数。它由不带参数的构造函数，或者为所有的行参提供默认实参的构造函数定义。
10.STL算法中的copy算法？
    copy(vec.begin(),vec.end(),dest.begin())；dest容器的空间要大于等于要拷贝进去的数据的个数。另有copy_n(vec.begin(),n,dest.begin());move(vec.begin(),vec.end(),dest.begin())算法于此类似。
11.什么时候使用拷贝构造函数？
    一个对象显示或隐式初始化另一个同类的对象；
    函数的非引用传参；
    函数非引用返回一个对象；
    初始化顺序容器中的元素；
    根据元素初始化列表初始化数组元素。
12.类模板的优点？
    与类型无关，具有很高的可复用性；
    保证类型安全，咋编译期进行类型检测；
    它是平台无关的，可移植性。
13.字符串不能重新赋值。
14.void* memset(void* s,int ch,size_t n);将s中前n个字节用ch替换并返回s；
15.inf fseek(FILE* stream,long offset,int fromwhere);函数设置文件指针stream位置
16.为什么拷贝构造函数的类对象的行参必须 是引用类型？
    若不是引用类型：为了调用拷贝构造函数，必须拷贝构造它的行参，为了拷贝构造它的行参，我们有需要调用拷贝构造函数，如此循环。则我们的调用永远不会成功。
17.合成的拷贝构造函数？
    没有定义拷贝构造函数，编译器就会为我们合成一个。与合成的默认构造函数不同，即使我们定义了拷贝构造函数，也会合成拷贝构造函数。
    注：当使用合成拷贝构造函数时，由于浅复制的问题，容易出现错误。
18.编写拷贝复制运算符时应该注意的问题？
    行参列表应为const&类型；
    返回应该为引用类型，以方便练习赋值；
    判断传入的参数是否和当前实例是同一个实例，以避免出现删除自身内存的情况；
    删除实例自身以有的内存，防止出现内存泄漏。
    更高级的方法是：创建一个临时实例，作为传入实例的副本，然后将当前实例数据成员和临时数据成员进行交换。当程序运行出临时实例的创建范围后，程序将会调用析构函数析构临时实例。
19.当一个 重载运算符是成员函数时，this绑定到左侧运算对象。成员运算符函数的（显示）参数数量比运算对象的数量少一个。
20.对于重载递增、递减运算符：首先，每种运算符建议重载前置和后置两个版本；其次，前置版本返回引用，后置版本返回值。
    为了解决前置与后置运算符无法区别的问题，后置版本接收一个额外的int类型行参（不被使用）。当我们使用后置运算符时，编译器为这个行参提供一个值为0的实参，这个行参的唯一作用就是去区分前置版本和 后置版本，而不是要真的在实现后置版本时参与运算，后置递增递减调用各自的前置版本来完成实际工作。
21.在继承体系中，首先初始化基类的部分，然后按照声明顺序依次初始化派生类成员。
22.在类名（函数名）后跟一个关键字final，可以阻止这个类成为基类（被覆盖）。
23.静态类型在编译时总是知道的，动态类型总是在运行时才知道。
24.因为一个基类的对象可能是派生类的一部分，也可能不是，所以不存在从基类向派生类的自动转换。
25.若通过基类的引用或指针调用派生类虚函数，则使用基类中的默认参数，即使实际运行的是派生类的函数版本，即默认实参是静态绑定，而虚函数却是动态绑定。
26.可以使用作用域运算符来回避虚函数机制。
27.vector是顺序存储的，只有在尾部插入（删除）才不会导致迭代器失效，在头部或者中间插入（删除）都会导致插入（删除）部分及其后的所有 迭代器失效。
map是映射，key和value是一一对应的，在内存中是零散存在的，迭代器通过key找到value，无论怎样插入都不会让迭代器失效，删除只会使得被删除的迭代器失效。
28。在C++中如果一个整型变量频繁使用，最好将其定义为register类型（寄存器类型）。







